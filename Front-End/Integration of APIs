Plaid Integration Module


# plaid_api.py
import requests
import os


class PlaidAPI:
    def __init__(self, api_key):
        self.base_url = "https://api.plaid.com"
        self.headers = {"Authorization": f"Bearer {api_key}"}
    
    def get_transactions(self):
        endpoint = "/transactions/get"
        response = requests.get(f"{self.base_url}{endpoint}", headers=self.headers)
        return response.json()


# Usage
plaid_api = PlaidAPI(os.getenv("PLAID_KEY"))
transactions = plaid_api.get_transactions()
API Wrapper Templated
class APIWrapper:
    def __init__(self, base_url, api_key):
        self.base_url = base_url
        self.headers = {"Authorization": f"Bearer {api_key}"}


    def fetch_data(self, endpoint, params=None):
        response = requests.get(f"{self.base_url}{endpoint}", headers=self.headers, params=params)
        response.raise_for_status()
        return response.json()


Adding transactions
Backend Endpoint
from flask import Flask, request, jsonify
from plaid_api import PlaidAPI
from db.connection import add_transaction_to_db


app = Flask(__name__)


@app.route('/add_transaction', methods=['POST'])
def add_transaction():
    try:
        data = request.json
        # Call Plaid to add transaction (mocked for simplicity)
        plaid = PlaidAPI("your_plaid_key")
        plaid_transaction = plaid.get_transactions()


        # Add transaction to local DB
        transaction_id = add_transaction_to_db(data)  # Save to your database
        
        return jsonify({"message": "Transaction added successfully", "transaction_id": transaction_id}), 201
    except Exception as e:
        return jsonify({"error": str(e)}), 500


if __name__ == '__main__':
    app.run(debug=True)
Database Interaction
# db/connection.py
import psycopg2


def add_transaction_to_db(transaction_data):
    connection = psycopg2.connect("dbname=your_db user=your_user password=your_password")
    cursor = connection.cursor()


    query = """
    INSERT INTO transactions (user_id, amount, category_id, description, date)
    VALUES (%s, %s, %s, %s, %s) RETURNING transaction_id;
    """
    cursor.execute(query, (
        transaction_data['user_id'],
        transaction_data['amount'],
        transaction_data['category_id'],
        transaction_data['description'],
        transaction_data['date']
    ))
    transaction_id = cursor.fetchone()[0]
    connection.commit()
    cursor.close()
    connection.close()


    return transaction_id


Dynamix Budget Updates
When a transaction is added or updated, the corresponding budget should adjust dynamically. Use a trigger or a real-time event system. 


Database Budget Updates
CREATE OR REPLACE FUNCTION update_budget_on_transaction() 
RETURNS TRIGGER AS $$
BEGIN
    UPDATE budgets
    SET allocated = allocated + NEW.amount
    WHERE budget_id = NEW.category_id;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER budget_update_trigger
AFTER INSERT OR UPDATE ON transactions
FOR EACH ROW
EXECUTE FUNCTION update_budget_on_transaction();


Real-Time Feedback with WebSockets
Use WebSockets for instant budget updates on the frontend.
# websocket_server.py
from flask import Flask
from flask_socketio import SocketIO, emit


app = Flask(__name__)
socketio = SocketIO(app)


@app.route('/add_transaction', methods=['POST'])
def add_transaction():
    # Logic to add transaction
    transaction_data = request.json


    # Notify frontend of updated budget
    socketio.emit('budget_updated', {'new_budget': transaction_data['amount']})
    return jsonify({"message": "Transaction added successfully"}), 201


if __name__ == '__main__':
    socketio.run(app)


Frontend Websocket Listener
const socket = io.connect('http://localhost:5000');


socket.on('budget_updated', (data) => {
    console.log('Budget updated:', data.new_budget);
    // Update UI dynamically
});


Interactive UI
Using a modern framework for interactive features
React Component for Adding Transactions
import React, { useState } from 'react';
import axios from 'axios';


function AddTransaction() {
    const [formData, setFormData] = useState({
        user_id: '',
        amount: '',
        category_id: '',
        description: '',
        date: ''
    });


    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            const response = await axios.post('/add_transaction', formData);
            alert('Transaction added successfully!');
        } catch (error) {
            console.error('Error adding transaction:', error);
        }
    };


    return (
        <form onSubmit={handleSubmit}>
            <input type="text" name="user_id" placeholder="User ID" onChange={(e) => setFormData({...formData, user_id: e.target.value})} />
            <input type="number" name="amount" placeholder="Amount" onChange={(e) => setFormData({...formData, amount: e.target.value})} />
            <input type="text" name="category_id" placeholder="Category ID" onChange={(e) => setFormData({...formData, category_id: e.target.value})} />
            <textarea name="description" placeholder="Description" onChange={(e) => setFormData({...formData, description: e.target.value})} />
            <input type="date" name="date" onChange={(e) => setFormData({...formData, date: e.target.value})} />
            <button type="submit">Add Transaction</button>
        </form>
    );
}     
